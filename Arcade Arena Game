<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arcane Arena - HTML S√ºr√ºm√º</title>
    <!-- Tailwind CSS Y√ºklemesi -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Inter Font -->
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700;900&display=swap');
        body { font-family: 'Inter', sans-serif; }
        .arena {
            touch-action: none; /* Mobil kaydƒ±rma sorununu √ß√∂zer */
        }
        @keyframes fadeInOut {
            0% { opacity: 0; transform: scale(0.5); }
            10% { opacity: 1; transform: scale(1); }
            90% { opacity: 1; transform: scale(1); }
            100% { opacity: 0; transform: scale(0.5); }
        }
        .animate-fadeInOut {
            animation: fadeInOut 2s ease-out forwards;
        }
        /* Mobile Joystick Styles */
        .joystick-grid {
            grid-template-areas: 
                "up-left up up-right"
                "left center right"
                "down-left down down-right";
        }
    </style>
</head>
<body class="bg-gray-900 text-white min-h-screen">
    <div id="app">
        <!-- Uygulama Buraya Y√ºklenecek -->
        <div class="flex items-center justify-center h-screen bg-gray-900 text-white">
            <div class="text-xl animate-pulse">Veriler Y√ºkleniyor...</div>
        </div>
    </div>

    <!-- Firebase SDK Y√ºklemesi -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, setDoc, onSnapshot, collection, query, limit, orderBy, getDoc, updateDoc, serverTimestamp, arrayUnion } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Firebase referanslarƒ±nƒ± global olarak a√ßƒ±yoruz
        window.firebase = {
            initializeApp,
            getAuth,
            signInAnonymously,
            signInWithCustomToken,
            onAuthStateChanged,
            getFirestore,
            doc,
            setDoc,
            onSnapshot,
            collection,
            query,
            limit,
            orderBy,
            getDoc,
            updateDoc,
            serverTimestamp,
            arrayUnion
        };
        
        // Ana betiƒüin y√ºklenmesini tetikle
        window.dispatchEvent(new Event('firebaseLoaded'));
    </script>

    <script>
        // --- Global Sabitler ---
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-arena-app';
        const APP_LOGO = '‚ú®üîÆ';
        const ARENA_SIZE = 400; 
        const PLAYER_SPEED = 2; 
        const ATTACK_COOLDOWN = 20; // 0.4 saniye (50 FPS'te 20 d√∂ng√º)
        
        const POTIONS = [
            { id: 'hp', name: 'Can ƒ∞ksiri', icon: '‚ù§Ô∏è', effect: 'Can Yeniler', cooldown: 100 }, 
            { id: 'spd', name: 'Hƒ±z ƒ∞ksiri', icon: '‚ö°', effect: 'Hƒ±z Artƒ±≈üƒ± (5s)', cooldown: 150 }, 
        ];

        const SCREEN = {
            START: 'START',
            CHARACTER_INVENTORY: 'CHARACTER_INVENTORY',
            ARENA: 'ARENA',
            LEADERBOARD: 'LEADERBOARD',
            STORE: 'STORE',
            MULTIPLAYER_LOBBY: 'MULTIPLAYER_LOBBY',
            GAME_OVER: 'GAME_OVER'
        };

        // --- Karakter Tanƒ±mlamasƒ± (500 Karakter) (React dosyasƒ±ndan kopyalandƒ±)
        const generateCharacters = () => {
            const CHARACTERS = {};
            const BASE_CLASSES = [
              { id: 'WARR', name: 'Sava≈ü√ßƒ±', icon: '‚öîÔ∏è', maxHp: 120, dmg: 10, ability: 'Kƒ±lƒ±√ß Darbesi' },
              { id: 'MAGE', name: 'B√ºy√ºc√º', icon: 'ü™Ñ', maxHp: 80, dmg: 15, ability: 'B√ºy√º Patlamasƒ±' },
              { id: 'ROGU', name: 'Hƒ±rsƒ±z', icon: 'üî™', maxHp: 100, dmg: 12, ability: 'Hƒ±zlƒ± Vuru≈ü' },
              { id: 'PALA', name: 'Paladin', icon: 'üõ°Ô∏è', maxHp: 130, dmg: 9, ability: 'Kutsal Kalkan' },
              { id: 'NECR', name: '√ñl√ºm B√ºy√ºc√ºs√º', icon: 'üíÄ', maxHp: 90, dmg: 14, ability: 'Hortlak √áaƒüƒ±r' },
              { id: 'HUNT', name: 'Avcƒ±', icon: 'üèπ', maxHp: 105, dmg: 11, ability: 'Yaylƒ±m Ate≈üi' },
              { id: 'BARD', name: 'Ozan', icon: 'üé∂', maxHp: 95, dmg: 8, ability: '≈ûarkƒ± B√ºy√ºs√º' },
              { id: 'MONK', name: 'Ke≈üi≈ü', icon: 'üëä', maxHp: 115, dmg: 13, ability: 'Yumruk Serisi' },
              { id: 'SHAM', name: '≈ûaman', icon: 'üåÄ', maxHp: 100, dmg: 10, ability: 'Ruh √áaƒüƒ±r' },
              { id: 'WARK', name: 'B√ºy√ºc√º Lordu', icon: 'üòà', maxHp: 110, dmg: 16, ability: 'Karanlƒ±k Patlama' }
            ];

            const TRAITS = [
                { suffix: 'Karanlƒ±k', dmgMod: 1.2, hpMod: 0.9, color: 'gray-700', priceBase: 500 },
                { suffix: 'I≈üƒ±k', dmgMod: 1.1, hpMod: 1.1, color: 'yellow-500', priceBase: 600 },
                { suffix: 'Buz', dmgMod: 0.9, hpMod: 1.2, color: 'cyan-400', priceBase: 700 },
                { suffix: 'Ate≈ü', dmgMod: 1.3, hpMod: 0.8, color: 'red-700', priceBase: 800 },
                { suffix: 'G√∂lge', dmgMod: 1.15, hpMod: 1.05, color: 'purple-700', priceBase: 900 },
                { suffix: 'G√∂k', dmgMod: 1.0, hpMod: 1.0, color: 'sky-400', priceBase: 1000 },
                { suffix: 'Z√ºmr√ºt', dmgMod: 1.1, hpMod: 1.1, color: 'emerald-500', priceBase: 1100 },
                { suffix: 'Kristal', dmgMod: 1.25, hpMod: 0.95, color: 'indigo-300', priceBase: 1200 },
                { suffix: 'Harp', dmgMod: 1.4, hpMod: 0.7, color: 'orange-700', priceBase: 1300 },
                { suffix: 'Kadim', dmgMod: 1.05, hpMod: 1.3, color: 'amber-600', priceBase: 1400 },
                { suffix: 'N√∂bet√ßi', dmgMod: 1.0, hpMod: 1.4, color: 'teal-500', priceBase: 1500 },
                { suffix: 'Ruh', dmgMod: 1.3, hpMod: 1.0, color: 'pink-400', priceBase: 1600 },
                { suffix: 'Kƒ±zƒ±l', dmgMod: 1.2, hpMod: 1.1, color: 'red-900', priceBase: 1700 },
                { suffix: 'Ye≈üim', dmgMod: 1.1, hpMod: 1.2, color: 'lime-500', priceBase: 1800 },
                { suffix: 'Krom', dmgMod: 1.0, hpMod: 1.3, color: 'blue-gray-400', priceBase: 1900 },
                { suffix: 'Mistik', dmgMod: 1.35, hpMod: 0.9, color: 'fuchsia-500', priceBase: 2000 },
                { suffix: '√áelik', dmgMod: 1.05, hpMod: 1.25, color: 'gray-500', priceBase: 2100 },
                { suffix: 'Zafer', dmgMod: 1.4, hpMod: 0.8, color: 'yellow-700', priceBase: 2200 },
                { suffix: 'Yƒ±ldƒ±z', dmgMod: 1.3, hpMod: 1.0, color: 'yellow-200', priceBase: 2300 },
                { suffix: 'Ay', dmgMod: 1.1, hpMod: 1.1, color: 'coolGray-300', priceBase: 2400 },
                { suffix: 'G√ºne≈ü', dmgMod: 1.2, hpMod: 1.0, color: 'yellow-600', priceBase: 2500 },
                { suffix: 'Okyanus', dmgMod: 1.0, hpMod: 1.2, color: 'blue-500', priceBase: 2600 },
                { suffix: '√á√∂l', dmgMod: 1.1, hpMod: 1.0, color: 'amber-400', priceBase: 2700 },
                { suffix: 'Kƒ±yamet', dmgMod: 1.45, hpMod: 0.75, color: 'black', priceBase: 2800 },
                { suffix: 'Kurt', dmgMod: 1.0, hpMod: 1.1, color: 'brown-400', priceBase: 2900 },
                { suffix: 'Ejder', dmgMod: 1.5, hpMod: 0.6, color: 'red-800', priceBase: 3000 },
                { suffix: 'Bataklƒ±k', dmgMod: 1.05, hpMod: 1.15, color: 'lime-800', priceBase: 3100 },
                { suffix: '≈ûim≈üek', dmgMod: 1.35, hpMod: 0.9, color: 'yellow-300', priceBase: 3200 },
                { suffix: 'Sis', dmgMod: 1.1, hpMod: 1.05, color: 'gray-500', priceBase: 3300 },
                { suffix: 'G√ºm√º≈ü', dmgMod: 1.2, hpMod: 1.0, color: 'gray-300', priceBase: 3400 },
                { suffix: 'Bronz', dmgMod: 1.0, hpMod: 1.1, color: 'orange-300', priceBase: 3500 },
                { suffix: 'Platin', dmgMod: 1.25, hpMod: 0.95, color: 'white', priceBase: 3600 },
                { suffix: 'Safir', dmgMod: 1.15, hpMod: 1.05, color: 'blue-600', priceBase: 3700 },
                { suffix: 'Yakut', dmgMod: 1.3, hpMod: 0.8, color: 'red-600', priceBase: 3800 },
                { suffix: 'Zehir', dmgMod: 1.1, hpMod: 1.2, color: 'green-600', priceBase: 3900 },
                { suffix: 'Vah≈üi', dmgMod: 1.2, hpMod: 0.9, color: 'amber-700', priceBase: 4000 },
                { suffix: 'Usta', dmgMod: 1.35, hpMod: 1.05, color: 'purple-800', priceBase: 4100 },
                { suffix: 'Acemi', dmgMod: 0.9, hpMod: 1.3, color: 'gray-300', priceBase: 4200 },
                { suffix: 'Kaos', dmgMod: 1.4, hpMod: 0.8, color: 'pink-800', priceBase: 4300 },
                { suffix: 'C√ºce', dmgMod: 1.0, hpMod: 1.2, color: 'brown-600', priceBase: 4400 },
                { suffix: 'Elf', dmgMod: 1.1, hpMod: 1.0, color: 'green-400', priceBase: 4500 },
                { suffix: 'Dev', dmgMod: 1.2, hpMod: 0.9, color: 'blue-900', priceBase: 4600 },
                { suffix: 'Goblin', dmgMod: 1.0, hpMod: 1.1, color: 'lime-600', priceBase: 4700 },
                { suffix: '√ñl√ºms√ºz', dmgMod: 1.55, hpMod: 0.65, color: 'gray-900', priceBase: 4800 },
                { suffix: 'ƒ∞blis', dmgMod: 1.4, hpMod: 0.8, color: 'red-900', priceBase: 4900 },
                { suffix: 'Melek', dmgMod: 1.3, hpMod: 1.1, color: 'yellow-100', priceBase: 5000 },
                { suffix: 'Buzul', dmgMod: 1.05, hpMod: 1.25, color: 'cyan-600', priceBase: 5100 },
                { suffix: 'Volkan', dmgMod: 1.4, hpMod: 0.7, color: 'red-500', priceBase: 5200 },
                { suffix: 'Paslƒ±', dmgMod: 0.95, hpMod: 1.1, color: 'brown-700', priceBase: 5300 },
                { suffix: 'Sihirli', dmgMod: 1.2, hpMod: 1.0, color: 'indigo-500', priceBase: 5400 }
            ]; 
        
            const ALL_CHARS = {};
            const INITIAL_UNLOCKED = ['WARR', 'MAGE', 'ROGU'];
            
            BASE_CLASSES.slice(0, 3).forEach(char => ALL_CHARS[char.id] = { 
                ...char, 
                color: char.id === 'MAGE' ? 'blue-500' : char.id === 'WARR' ? 'red-500' : 'green-500', 
                price: 0 
            });

            let charIndex = 0; 
            
            for (let t = 0; t < TRAITS.length; t++) {
                for (let b = 0; b < BASE_CLASSES.length; b++) {
                    
                    const base = BASE_CLASSES[b];
                    const trait = TRAITS[t];
                    const charId = `${base.id}_${t}`;

                    if (charId === 'WARR_0' || charId === 'MAGE_0' || charId === 'ROGU_0') continue;
                    
                    charIndex++; 
                    
                    const newChar = {
                        id: charId,
                        name: `${trait.suffix} ${base.name}`,
                        color: trait.color,
                        icon: base.icon,
                        maxHp: Math.round(base.maxHp * trait.hpMod),
                        dmg: Math.round(base.dmg * trait.dmgMod),
                        ability: base.ability + (charIndex % 3 === 0 ? ' (Ekstra Etki)' : ''),
                        price: trait.priceBase + (charIndex * 50) 
                    };
                    ALL_CHARS[charId] = newChar;
                }
            }
            
            ALL_CHARS['WARR'].price = 0;
            ALL_CHARS['MAGE'].price = 0;
            ALL_CHARS['ROGU'].price = 0;
            
            return ALL_CHARS;
        };

        const ALL_CHARACTERS = generateCharacters();
        const INITIAL_UNLOCKED = ['WARR', 'MAGE', 'ROGU'];

        // --- Global State Y√∂netimi (React State yerine) ---
        const state = {
            db: null,
            auth: null,
            userId: null,
            username: '',
            screen: SCREEN.START,
            isAuthReady: false,
            showPwaModal: false,
            playerData: {
                current_ap_balance: 0,
                unlocked_chars: INITIAL_UNLOCKED,
                active_char_id: 'WARR',
                total_lifetime_ap: 0,
            },
            leaderboard: [],
            // Arena Game State
            hp: 0,
            apGained: 0,
            enemies: [],
            gameTime: 0,
            isSpeedBoost: false,
            movement: { x: 0, y: 0 },
            playerPos: { x: ARENA_SIZE / 2, y: ARENA_SIZE / 2 },
            potionCooldowns: { hp: 0, spd: 0 },
            message: '',
            isMobileView: window.innerWidth < 768,
            lastAttackTime: 0,
            gameIntervalId: null,
        };

        const setActiveCharacter = async (charId) => {
            if (!state.db || !state.userId || !state.isAuthReady || !state.playerData.unlocked_chars.includes(charId)) return;
            
            try {
                const userDocRef = firebase.doc(state.db, `artifacts/${appId}/users/${state.userId}/game_data/main`);
                await firebase.updateDoc(userDocRef, { active_char_id: charId });
            } catch (e) {
                console.error("Failed to set active character:", e);
            }
        };

        const setScreen = (newScreen) => {
            if (state.gameIntervalId) {
                clearInterval(state.gameIntervalId); // Oyun d√∂ng√ºs√ºn√º durdur
                state.gameIntervalId = null;
            }
            state.screen = newScreen;
            renderApp();
        };

        const updateState = (updates, shouldRender = true) => {
            Object.keys(updates).forEach(key => {
                if (key in state) {
                     state[key] = updates[key];
                } else if (key in state.playerData) {
                    state.playerData[key] = updates[key];
                } else if (key === 'potionCooldowns') {
                    // Specific handling for nested objects like potionCooldowns
                    state.potionCooldowns = { ...state.potionCooldowns, ...updates[key] };
                }
            });
            if (shouldRender) {
                renderApp();
            }
        };


        // --- Firestore Yollarƒ± ---
        const getLeaderboardRef = (db) => firebase.collection(db, `artifacts/${appId}/public/data/leaderboard_arena`);
        const getLobbyRef = (db) => firebase.collection(db, `artifacts/${appId}/public/data/lobby`);
        const getUserDataRef = (db, userId) => firebase.doc(db, `artifacts/${appId}/users/${userId}/game_data/main`);

        // --- Firebase Ba≈ülatma ve Veri Dinleyicileri ---
        window.addEventListener('firebaseLoaded', async () => {
            if (Object.keys(firebaseConfig).length === 0) {
                console.error("Firebase config missing.");
                return;
            }

            try {
                const app = firebase.initializeApp(firebaseConfig);
                const auth = firebase.getAuth(app);
                const db = firebase.getFirestore(app);
                
                state.db = db;
                state.auth = auth;

                // Auth ƒ∞≈ülemleri
                const authenticate = async () => {
                    try {
                        const token = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
                        if (token) {
                            await firebase.signInWithCustomToken(auth, token);
                        } else {
                            await firebase.signInAnonymously(auth);
                        }
                    } catch (error) {
                        console.error("Authentication failed, trying anonymous:", error);
                        await firebase.signInAnonymously(auth);
                    }
                };
                
                // Auth Listener
                firebase.onAuthStateChanged(auth, (user) => {
                    if (user) {
                        const generatedUsername = `Sava≈ü√ßƒ±-${user.uid.substring(0, 4)}`;
                        updateState({
                            userId: user.uid,
                            username: generatedUsername,
                            isAuthReady: true,
                        });
                        
                        // Start listening for user data and leaderboard once authenticated
                        listenToUserData(db, user.uid);
                        listenToLeaderboard(db);
                    } else {
                        authenticate();
                    }
                });

                // G√∂r√ºn√ºm Modu Dinleyicisi
                const handleResize = () => {
                    // Yalnƒ±zca pencere boyutuna g√∂re otomatik olarak ge√ßi≈ü yapar
                    updateState({ isMobileView: window.innerWidth < 768 }, false); 
                };
                window.addEventListener('resize', handleResize);
                
            } catch (e) {
                console.error("Firebase initialization failed:", e);
                document.getElementById('app').innerHTML = `<div class="p-8 text-center text-red-500">Hata: Firebase ba≈ülatƒ±lamadƒ±.</div>`;
            }
        });


        // Kullanƒ±cƒ± Verisi Dinleyicisi
        function listenToUserData(db, userId) {
            const docRef = getUserDataRef(db, userId);
            firebase.onSnapshot(docRef, (docSnap) => {
                if (docSnap.exists()) {
                    const data = docSnap.data();
                    const activeCharId = ALL_CHARACTERS[data.active_char_id] ? data.active_char_id : 'WARR';
                    updateState({
                        current_ap_balance: data.current_ap_balance || 0,
                        unlocked_chars: data.unlocked_chars || INITIAL_UNLOCKED,
                        active_char_id: activeCharId, 
                        total_lifetime_ap: data.total_lifetime_ap || 0,
                    });
                } else {
                    // Yeni kullanƒ±cƒ± i√ßin ba≈ülangƒ±√ß verisini kaydet
                    firebase.setDoc(docRef, {
                        current_ap_balance: 0,
                        unlocked_chars: INITIAL_UNLOCKED,
                        active_char_id: 'WARR',
                        total_lifetime_ap: 0,
                    }, { merge: true }).catch(err => console.error("Initial user data save failed:", err));
                }
            }, (error) => {
                console.error("User data snapshot error:", error);
            });
        }

        // Liderlik Tablosu Dinleyicisi
        function listenToLeaderboard(db) {
            const q = firebase.query(getLeaderboardRef(db), firebase.orderBy('total_lifetime_ap', 'desc'), firebase.limit(10));
            firebase.onSnapshot(q, (snapshot) => {
                const newLeaderboard = snapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                }));
                updateState({ leaderboard: newLeaderboard });
            }, (error) => {
                console.error("Leaderboard snapshot error:", error);
            });
        }

        // --- Firebase ƒ∞≈ülevleri ---

        const updateApAndLeaderboard = async (apGained) => {
            if (!state.db || !state.userId || !state.isAuthReady) return;

            try {
                const userDocRef = getUserDataRef(state.db, state.userId);
                const leaderboardDocRef = firebase.doc(getLeaderboardRef(state.db), state.userId);

                const userSnap = await firebase.getDoc(userDocRef);
                const currentData = userSnap.exists() ? userSnap.data() : { current_ap_balance: 0, total_lifetime_ap: 0 };
                
                const newCurrentAp = (currentData.current_ap_balance || 0) + apGained;
                const newTotalAp = (currentData.total_lifetime_ap || 0) + apGained;

                // 1. Private User Data Update
                await firebase.updateDoc(userDocRef, {
                    current_ap_balance: newCurrentAp,
                    total_lifetime_ap: newTotalAp,
                });

                // 2. Leaderboard Update (Public Data)
                const activeChar = ALL_CHARACTERS[state.playerData.active_char_id] || ALL_CHARACTERS['WARR'];
                await firebase.setDoc(leaderboardDocRef, {
                    userId: state.userId,
                    username: state.username,
                    class: activeChar.name,
                    total_lifetime_ap: newTotalAp,
                    lastUpdated: firebase.serverTimestamp()
                }, { merge: true });

            } catch (e) {
                console.error("Failed to update AP and Leaderboard:", e);
            }
        };

        const purchaseCharacter = async (charId, price) => {
            if (!state.db || !state.userId || !state.isAuthReady || state.playerData.current_ap_balance < price) {
                console.error("Insufficient AP or connection error.");
                return false;
            }

            try {
                const userDocRef = getUserDataRef(state.db, state.userId);
                
                await firebase.updateDoc(userDocRef, {
                    current_ap_balance: state.playerData.current_ap_balance - price,
                    unlocked_chars: firebase.arrayUnion(charId)
                });

                return true;
            } catch (e) {
                console.error("Character purchase error:", e);
                return false;
            }
        };


        // --- UI Bile≈üenleri (Vanilla JS) ---

        const ButtonHTML = (text, onClickFn, color = 'bg-indigo-600', disabled = false, className = '') => {
            return `
                <button
                    onclick="${onClickFn}"
                    class="px-6 py-3 rounded-xl font-bold shadow-lg transition duration-200 ${color} ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:bg-opacity-80 active:translate-y-0.5'} ${className}"
                    ${disabled ? 'disabled' : ''}
                >
                    ${text}
                </button>
            `;
        };
        
        const setActiveViewMode = (isMobile) => {
             updateState({ isMobileView: isMobile });
        };

        // --- SCREEN RENDER ƒ∞≈ûLEVLERƒ∞ ---

        function renderStartScreen() {
            const activeChar = ALL_CHARACTERS[state.playerData.active_char_id] || ALL_CHARACTERS['WARR'];
            
            const html = `
                <div class="flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white p-4">
                    <div class="bg-gray-800 p-8 rounded-2xl shadow-2xl w-full max-w-sm">
                        <h1 class="text-4xl font-extrabold text-center text-indigo-400 mb-2">
                            ${APP_LOGO} Arcane Arena
                        </h1>
                        <p class="text-center text-sm mb-6 text-gray-400">Hƒ±zlƒ± Refleks ve Strateji RPG'si</p>

                        <!-- G√∂r√ºn√ºm Modu Deƒüi≈ütirme ve Yenile Butonu -->
                        <div class="flex justify-between items-center mb-4 p-3 bg-gray-700 rounded-lg">
                            <span class="font-bold text-sm text-yellow-300">
                                G√∂r√ºn√ºm: ${state.isMobileView ? 'MOBƒ∞L' : 'Bƒ∞LGƒ∞SAYAR'}
                            </span>
                            ${ButtonHTML(
                                state.isMobileView ? 'PC Moduna Ge√ß' : 'MOBƒ∞L Moduna Ge√ß', 
                                `setActiveViewMode(${!state.isMobileView})`, 
                                state.isMobileView ? 'bg-indigo-500' : 'bg-pink-500', 
                                false, 
                                'px-3 py-1 text-xs'
                            )}
                        </div>

                        <div class="text-center mb-6 bg-gray-700 p-4 rounded-lg">
                            <p class="text-sm">Kullanƒ±cƒ± ID: <span class="font-mono text-xs text-indigo-300 break-all">${state.userId}</span></p>
                            <p class="text-lg font-semibold mt-1">${state.username}</p>
                            <p class="mt-2 text-xl font-bold text-yellow-400">Mevcut AP: ${state.playerData.current_ap_balance}</p>
                            <p class="mt-1 text-base text-gray-300">Aktif Karakter: <span class="text-${activeChar.color}">${activeChar.name} ${activeChar.icon}</span></p>
                            <p class="mt-1 text-sm text-gray-500">Kariyer AP (L-Board): ${state.playerData.total_lifetime_ap}</p>
                        </div>

                        <div class="space-y-4">
                            ${ButtonHTML('Singleplayer (AI\'ya Kar≈üƒ± Sava≈ü)', `setScreen('${SCREEN.ARENA}')`, 'bg-green-600')}
                            ${ButtonHTML('Multiplayer (Lobi) - PVP Yakƒ±nda', `setScreen('${SCREEN.MULTIPLAYER_LOBBY}')`, 'bg-orange-600')}
                            ${ButtonHTML(`Karakterlerim (${activeChar.name})`, `setScreen('${SCREEN.CHARACTER_INVENTORY}')`, 'bg-blue-600')}
                            <div class="flex space-x-2">
                                ${ButtonHTML('Maƒüaza (Yeni Karakter Al)', `setScreen('${SCREEN.STORE}')`, 'bg-purple-600', false, 'flex-1')}
                                ${ButtonHTML('L-Board', `setScreen('${SCREEN.LEADERBOARD}')`, 'bg-red-600', false, 'flex-1')}
                            </div>
                            ${ButtonHTML('‚¨áÔ∏è Uygulamayƒ± ƒ∞ndir/Y√ºkle (PWA A√ßƒ±klamasƒ±)', `updateState({ showPwaModal: true })`, 'bg-yellow-500', false, 'w-full text-gray-900')}
                        </div>
                    </div>
                </div>
                ${state.showPwaModal ? renderPwaModal() : ''}
            `;
            document.getElementById('app').innerHTML = html;
        }

        function renderPwaModal() {
            return `
                <div class="fixed inset-0 bg-black bg-opacity-70 z-50 flex items-center justify-center p-4">
                    <div class="bg-gray-800 p-6 md:p-8 rounded-2xl shadow-2xl w-full max-w-lg text-white">
                        <h3 class="text-2xl font-extrabold text-yellow-400 mb-4 flex items-center">
                            <span class="mr-2 text-3xl">‚¨áÔ∏è</span> ƒ∞ndirilebilir Uygulama Bilgisi
                        </h3>
                        <p class="mb-4 text-sm text-red-300 font-bold">
                            √ñNEMLƒ∞: Bu ortamda, derlenmi≈ü .exe veya .apk dosyalarƒ± olu≈üturmak **teknik olarak m√ºmk√ºn deƒüildir.**
                        </p>
                        
                        <h4 class="font-bold text-lg text-indigo-300 mb-2">Progressive Web App (PWA) √á√∂z√ºm√º:</h4>
                        <p class="text-sm mb-4">
                            Bu uygulama, modern bir **PWA** olarak yapƒ±landƒ±rƒ±lmƒ±≈ütƒ±r. Bu, size en yakƒ±n "ƒ∞ndirilebilir Uygulama" deneyimini sunar:
                        </p>

                        <ul class="list-disc list-inside text-sm space-y-2 ml-4 mb-6 text-gray-300">
                            <li>**Mobil:** Tarayƒ±cƒ±nƒ±zƒ±n men√ºs√ºnden (genellikle saƒü √ºstteki √º√ß nokta) **"Ana Ekrana Ekle"** se√ßeneƒüini kullanƒ±n. Uygulama, tam ekran mobil uygulama gibi √ßalƒ±≈üacaktƒ±r.</li>
                            <li>**Bilgisayar:** Tarayƒ±cƒ±nƒ±zƒ±n adres √ßubuƒüunda √ßƒ±kan **"Y√ºkle"** simgesine tƒ±klayƒ±n (veya men√ºden "Arcane Arena'yƒ± Y√ºkle" se√ßeneƒüini se√ßin). Uygulama masa√ºst√º uygulamanƒ±z gibi √ßalƒ±≈üacaktƒ±r.</li>
                            <li>**Avantajƒ±:** Hƒ±zlƒ± a√ßƒ±lƒ±r, tam ekran √ßalƒ±≈üƒ±r ve cihazƒ±nƒ±zƒ±n bir par√ßasƒ± gibi hissettirir.</li>
                        </ul>
                        
                        ${ButtonHTML('Anladƒ±m, Oyuna Geri D√∂n', `updateState({ showPwaModal: false })`, 'bg-green-600', false, 'w-full')}
                    </div>
                </div>
            `;
        }

        function renderCharacterInventoryScreen() {
            const unlockedChars = state.playerData.unlocked_chars;
            const activeCharId = state.playerData.active_char_id;
            const totalChars = Object.keys(ALL_CHARACTERS).length;

            const charCards = Object.values(ALL_CHARACTERS)
                .filter(c => unlockedChars.includes(c.id))
                .map(char => {
                    const isActive = char.id === activeCharId;
                    return `
                        <div
                            onclick="setActiveCharacter('${char.id}')"
                            class="p-3 rounded-xl cursor-pointer transition duration-300 text-center shadow-lg border-2 ${isActive ? 'border-yellow-400 bg-yellow-900/30' : 'border-gray-500 hover:bg-gray-700'} bg-gray-700"
                        >
                            <div class="text-3xl mb-1">${char.icon}</div>
                            <h3 class="text-sm font-bold truncate">${char.name}</h3>
                            <p class="text-xs text-gray-300">HP: ${char.maxHp} | DM: ${char.dmg}</p>
                            <button ${isActive ? 'disabled' : ''} class="mt-2 px-3 py-1 text-xs font-semibold rounded-lg ${isActive ? 'bg-green-700' : 'bg-blue-600 hover:opacity-80'}">
                                ${isActive ? 'AKTƒ∞F' : 'Se√ß / Aktif Yap'}
                            </button>
                        </div>
                    `;
                }).join('');

            const html = `
                <div class="flex flex-col items-center min-h-screen bg-gray-900 text-white p-4">
                    <div class="bg-gray-800 p-6 rounded-2xl shadow-2xl w-full max-w-4xl mt-8">
                        <h2 class="text-3xl font-bold text-center text-blue-400 mb-6">Karakterlerim (${unlockedChars.length}/${totalChars})</h2>
                        <div class="grid grid-cols-2 md:grid-cols-5 gap-4 max-h-[60vh] overflow-y-auto pr-2">
                            ${charCards}
                        </div>
                        <div class="text-center mt-6">
                            ${ButtonHTML('Geri D√∂n', `setScreen('${SCREEN.START}')`, 'bg-gray-600')}
                        </div>
                    </div>
                </div>
            `;
            document.getElementById('app').innerHTML = html;
        }

        function renderStoreScreen() {
            const purchasableChars = Object.values(ALL_CHARACTERS).filter(c => c.price > 0); 
            const currentAp = state.playerData.current_ap_balance;
            const unlockedChars = state.playerData.unlocked_chars;

            const charCards = purchasableChars.map(char => {
                const isUnlocked = unlockedChars.includes(char.id);
                const canAfford = currentAp >= char.price;
                const buttonColor = isUnlocked ? 'bg-green-700' : canAfford ? 'bg-yellow-600' : 'bg-red-700';
                const buttonText = isUnlocked ? 'ALINDI' : canAfford ? `${char.price} AP Al` : `${char.price} AP (Yetersiz)`;
                
                return `
                    <div
                        class="p-3 rounded-xl transition duration-300 text-center shadow-lg border-2 ${isUnlocked ? 'border-green-400' : 'border-gray-500'} bg-gray-700"
                    >
                        <div class="text-3xl mb-1">${char.icon}</div>
                        <h3 class="text-sm font-bold truncate">${char.name}</h3>
                        <p class="text-xs text-gray-300">DMG: ${char.dmg} | HP: ${char.maxHp}</p>
                        ${ButtonHTML(
                            buttonText, 
                            `purchaseCharacter('${char.id}', ${char.price})`, 
                            buttonColor, 
                            isUnlocked || !canAfford, 
                            'mt-2 w-full py-1 text-xs'
                        )}
                    </div>
                `;
            }).join('');

            const html = `
                <div class="flex flex-col items-center min-h-screen bg-gray-900 text-white p-4">
                    <div class="bg-gray-800 p-6 rounded-2xl shadow-2xl w-full max-w-4xl mt-8">
                        <h2 class="text-3xl font-bold text-center text-purple-400 mb-6">Karakter Maƒüazasƒ± (Toplam ${purchasableChars.length} Karakter)</h2>
                        <p class="text-center text-xl font-bold mb-6 text-yellow-400">Mevcut AP Bakiyeniz: ${currentAp}</p>
                        
                        <div class="grid grid-cols-2 md:grid-cols-5 gap-4 max-h-[60vh] overflow-y-auto pr-2">
                            ${charCards}
                        </div>
                        
                        <div class="text-center mt-6">
                            ${ButtonHTML('Geri D√∂n', `setScreen('${SCREEN.START}')`, 'bg-gray-600')}
                        </div>
                    </div>
                </div>
            `;
            document.getElementById('app').innerHTML = html;
        }

        function renderLeaderboardScreen() {
            const tableRows = state.leaderboard.length > 0 ? state.leaderboard.map((player, index) => `
                <tr key="${player.id}" class="border-b border-gray-700 ${index < 3 ? 'bg-yellow-900 bg-opacity-30' : 'hover:bg-gray-700'}">
                    <td class="px-6 py-3 font-bold">${index + 1}</td>
                    <td class="px-6 py-3 font-semibold">${player.username}</td>
                    <td class="px-6 py-3 text-gray-400">${player.class}</td>
                    <td class="px-6 py-3 text-right text-yellow-300 font-bold">${player.total_lifetime_ap}</td>
                </tr>
            `).join('') : `
                <tr>
                    <td colSpan="4" class="text-center py-6 text-gray-400">Liderlik Tablosu Y√ºkleniyor veya Bo≈ü.</td>
                </tr>
            `;

            const html = `
                <div class="flex flex-col items-center min-h-screen bg-gray-900 text-white p-4">
                    <div class="bg-gray-800 p-6 rounded-2xl shadow-2xl w-full max-w-2xl mt-8">
                        <h2 class="text-3xl font-bold text-center text-red-400 mb-6">Arcane Arena Liderlik Tablosu (Top 10)</h2>
                        <div class="overflow-x-auto">
                            <table class="min-w-full text-left text-sm font-light">
                                <thead class="border-b font-medium border-gray-600">
                                    <tr>
                                        <th scope="col" class="px-6 py-3">#</th>
                                        <th scope="col" class="px-6 py-3">Kullanƒ±cƒ±</th>
                                        <th scope="col" class="px-6 py-3">Sƒ±nƒ±f</th>
                                        <th scope="col" class="px-6 py-3 text-right">Kariyer AP</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${tableRows}
                                </tbody>
                            </table>
                        </div>
                        <div class="text-center mt-6">
                            ${ButtonHTML('Geri D√∂n', `setScreen('${SCREEN.START}')`, 'bg-gray-600')}
                        </div>
                    </div>
                </div>
            `;
            document.getElementById('app').innerHTML = html;
        }

        function renderGameOverScreen() {
            const activeChar = ALL_CHARACTERS[state.playerData.active_char_id] || ALL_CHARACTERS['WARR'];
            const html = `
                <div class="flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white p-4">
                    <div class="bg-gray-800 p-8 rounded-2xl shadow-2xl w-full max-w-sm text-center">
                        <h2 class="text-4xl font-bold text-red-500 mb-4">M√úCADELE SONA ERDƒ∞!</h2>
                        <p class="text-lg font-semibold mb-2">Sƒ±nƒ±f: ${activeChar.name} ${activeChar.icon}</p>
                        <p class="text-3xl font-extrabold text-yellow-400 mb-6">Kazanƒ±lan AP: ${state.apGained}</p>
                        <p class="text-xl font-bold text-indigo-400 mb-6">Yeni Toplam AP: ${state.playerData.total_lifetime_ap}</p>

                        <div class="space-y-3">
                            ${ButtonHTML('Tekrar Oyna', `setScreen('${SCREEN.ARENA}')`, 'bg-green-600')}
                            ${ButtonHTML('Maƒüazaya Git (AP Harca)', `setScreen('${SCREEN.STORE}')`, 'bg-purple-600')}
                            ${ButtonHTML('Ana Men√º', `setScreen('${SCREEN.START}')`, 'bg-gray-600')}
                        </div>
                    </div>
                </div>
            `;
            document.getElementById('app').innerHTML = html;
        }

        // --- ARENA GAME (Oyun D√∂ng√ºs√º ve Render) ---

        // Klavye olay y√∂neticileri
        const handleKeyDown = (e) => {
            if (state.screen !== SCREEN.ARENA || state.isMobileView) return;

            const key = e.key.toLowerCase();
            let newMovement = { ...state.movement };

            // HAREKET
            if (key === 'w') newMovement.y = -1;
            if (key === 's') newMovement.y = 1;
            if (key === 'a') newMovement.x = -1;
            if (key === 'd') newMovement.x = 1;
            
            // YETENEK
            if (key === 'e') {
                e.preventDefault(); 
                useAbility();
            }

            // ƒ∞KSƒ∞RLER
            if (key === 'q') usePotion('hp');
            if (key === 'r') usePotion('spd');

            updateState({ movement: newMovement }, false);
        };

        const handleKeyUp = (e) => {
            if (state.screen !== SCREEN.ARENA || state.isMobileView) return;

            const key = e.key.toLowerCase();
            let newMovement = { ...state.movement };

            if (key === 'w') newMovement.y = newMovement.y === -1 ? 0 : newMovement.y;
            if (key === 's') newMovement.y = newMovement.y === 1 ? 0 : newMovement.y;
            if (key === 'a') newMovement.x = newMovement.x === -1 ? 0 : newMovement.x;
            if (key === 'd') newMovement.x = newMovement.x === 1 ? 0 : newMovement.x;

            updateState({ movement: newMovement }, false);
        };

        // Oyun State'i Resetleme ve D√∂ng√ºy√º Ba≈ülatma
        function initializeArenaGame() {
            const activeChar = ALL_CHARACTERS[state.playerData.active_char_id] || ALL_CHARACTERS['WARR'];

            // Initial State Reset
            updateState({
                hp: activeChar.maxHp,
                apGained: 0,
                enemies: [],
                gameTime: 0,
                isSpeedBoost: false,
                movement: { x: 0, y: 0 },
                playerPos: { x: ARENA_SIZE / 2, y: ARENA_SIZE / 2 },
                potionCooldowns: { hp: 0, spd: 0 },
                message: '',
                lastAttackTime: 0,
            }, false); 

            // Klavye listener'larƒ± ekle (sadece Arena ekranƒ±nda kullanƒ±≈ülƒ± olacak)
            window.addEventListener('keydown', handleKeyDown);
            window.addEventListener('keyup', handleKeyUp);
            
            // Oyun d√∂ng√ºs√ºn√º ba≈ülat
            if (state.gameIntervalId) clearInterval(state.gameIntervalId); // Eskisini temizle
            state.gameIntervalId = setInterval(gameLoop, 20); // 50 FPS
        }

        // Ana Oyun D√∂ng√ºs√º
        function gameLoop() {
            if (state.hp <= 0) {
                if (state.gameIntervalId) clearInterval(state.gameIntervalId);
                updateApAndLeaderboard(state.apGained);
                setScreen(SCREEN.GAME_OVER);
                return;
            }

            // 1. Time & Cooldowns
            state.gameTime++;
            state.potionCooldowns.hp = Math.max(0, state.potionCooldowns.hp - 1);
            state.potionCooldowns.spd = Math.max(0, state.potionCooldowns.spd - 1);

            // 2. Oyuncu Hareketi
            const speed = state.isSpeedBoost ? PLAYER_SPEED * 2.5 : PLAYER_SPEED;
            let newX = state.playerPos.x + state.movement.x * speed;
            let newY = state.playerPos.y + state.movement.y * speed;

            // Sƒ±nƒ±r Kontrol√º
            newX = Math.max(0, Math.min(ARENA_SIZE - 20, newX));
            newY = Math.max(0, Math.min(ARENA_SIZE - 20, newY));
            state.playerPos = { x: newX, y: newY };

            // 3. AI ve √áarpƒ±≈üma Kontrol√º
            const now = Date.now();
            let enemiesHit = false;
            let newEnemies = state.enemies.map(enemy => {
                const dx = state.playerPos.x - enemy.x;
                const dy = state.playerPos.y - enemy.y;
                const dist = Math.sqrt(dx * dx + dy * dy);

                let newEnemy = { ...enemy };
                
                // D√º≈üman Kovalama
                if (dist > 5) {
                    newEnemy.x += (dx / dist) * enemy.speed;
                    newEnemy.y += (dy / dist) * enemy.speed;
                }

                // √áarpƒ±≈üma ve Hasar Kontrol√º (Refleks Mekaniƒüi)
                if (dist < 25 && now - (enemy.lastHitTime || 0) > 500) { 
                    const isMoving = state.movement.x !== 0 || state.movement.y !== 0;

                    if (!isMoving || (isMoving && Math.random() < 0.5)) {
                        // Hasar al
                        state.hp = Math.max(0, state.hp - enemy.dmg);
                        newEnemy.lastHitTime = now;
                        state.message = `-${enemy.dmg} HP! Vuruldun.`;
                        setTimeout(() => state.message = '', 1500);
                    } else {
                        // Ka√ßƒ±nma
                        newEnemy.status = 'SAVU≈û';
                        state.message = 'SAVU≈û! Hƒ±zlƒ± Refleks.';
                        setTimeout(() => {
                           // Bu durumda enemies state'ini g√ºncellemek zor
                           // Sadece g√∂rsel status'u resetleyelim
                        }, 300); 
                    }
                    enemiesHit = true;
                }
                return newEnemy;
            }).filter(e => e.hp > 0);
            
            state.enemies = newEnemies;

            // 4. D√º≈üman √úretme Mekaniƒüi
            if (state.gameTime % 100 === 0 && state.gameTime > 0) { 
                const level = Math.floor(state.gameTime / 100);
                const initialHp = 30 + level * 5;
                const newEnemy = {
                    id: Date.now() + Math.random(),
                    x: Math.random() < 0.5 ? 0 : ARENA_SIZE - 20,
                    y: Math.random() * ARENA_SIZE,
                    hp: initialHp, 
                    maxHp: initialHp,
                    dmg: 5 + level,
                    speed: 1 + (level * 0.1),
                    status: 'NORMAL',
                    lastHitTime: 0
                };
                state.enemies.push(newEnemy);
            }

            // Oyun alanƒ±nƒ± g√ºncelle
            renderArenaGameUI(true);
        }

        // Yetenek Kullanƒ±mƒ±
        function useAbility() {
            const now = state.gameTime;
            if (now - state.lastAttackTime < ATTACK_COOLDOWN) {
                state.message = '√áok Hƒ±zlƒ±! Yetenek Hazƒ±r Deƒüil.';
                setTimeout(() => state.message = '', 1500);
                return; 
            }
            state.lastAttackTime = now;
            state.message = `${(ALL_CHARACTERS[state.playerData.active_char_id] || ALL_CHARACTERS['WARR']).ability} Kullanƒ±ldƒ±!`;
            setTimeout(() => state.message = '', 1500);

            const selectedClass = ALL_CHARACTERS[state.playerData.active_char_id] || ALL_CHARACTERS['WARR'];

            let hitCount = 0;
            state.enemies = state.enemies.map(enemy => {
                const dx = state.playerPos.x - enemy.x;
                const dy = state.playerPos.y - enemy.y;
                const dist = Math.sqrt(dx * dx + dy * dy);

                if (dist < 80) { 
                    hitCount++;
                    return { ...enemy, hp: enemy.hp - selectedClass.dmg, status: 'VURULDU' };
                }
                return enemy;
            }).filter(e => e.hp > 0);

            if (hitCount > 0) {
                state.apGained += (hitCount * 5); 
                // Status'u 300ms sonra normale d√∂nd√ºr
                setTimeout(() => {
                    state.enemies = state.enemies.map(e => e.status === 'VURULDU' ? { ...e, status: 'NORMAL' } : e);
                }, 300);
            }
        }

        // ƒ∞ksir Kullanƒ±mƒ±
        function usePotion(id) {
            const potion = POTIONS.find(p => p.id === id);
            if (!potion || state.potionCooldowns[id] > 0) {
              state.message = `${potion.name} hen√ºz hazƒ±r deƒüil. (${Math.ceil(state.potionCooldowns[id] / 50)}s)`;
              setTimeout(() => state.message = '', 1500);
              renderArenaGameUI(true); // UI g√ºncellemesi i√ßin render √ßaƒürƒ±sƒ±
              return;
            }

            const activeChar = ALL_CHARACTERS[state.playerData.active_char_id] || ALL_CHARACTERS['WARR'];

            if (id === 'hp') {
              state.hp = Math.min(activeChar.maxHp, state.hp + activeChar.maxHp * 0.3);
              state.message = 'Can ƒ∞ksiri Kullanƒ±ldƒ±! (+30% HP)';
            } else if (id === 'spd') {
              state.isSpeedBoost = true;
              state.message = 'Hƒ±z ƒ∞ksiri: 5 saniye boyunca Hƒ±zlandƒ±!';
              setTimeout(() => {
                state.isSpeedBoost = false;
                renderArenaGameUI(true); // Hƒ±z boost bittiƒüinde UI'ƒ± g√ºncelle
              }, 5000); 
            }
            state.potionCooldowns[id] = potion.cooldown;
            setTimeout(() => state.message = '', 1500);
            renderArenaGameUI(true); // Durum deƒüi≈ütiƒüinde UI'ƒ± g√ºncelle
        }


        // Arena G√∂r√ºn√ºm√ºn√º Olu≈üturma/G√ºncelleme
        function renderArenaGameUI(isUpdate = false) {
            const container = document.getElementById('app');
            const selectedClass = ALL_CHARACTERS[state.playerData.active_char_id] || ALL_CHARACTERS['WARR'];

            if (!isUpdate) {
                // ƒ∞lk kurulum (HTML'i tamamen olu≈ütur)
                const arenaHtml = `
                    <div class="flex flex-col items-center justify-start min-h-screen bg-gray-900 text-white p-4">
                        <div class="w-full max-w-xl mb-4 bg-gray-800 p-3 rounded-xl shadow-xl">
                            <h3 id="arena-title" class="text-xl font-bold text-center mb-1 text-indigo-300">ARENA SAVA≈ûI: ${selectedClass.name}</h3>
                            <div class="flex justify-between text-sm items-center">
                                <p class="font-semibold text-red-400">HP: <span id="hp-value">${state.hp}</span>/${selectedClass.maxHp}</p>
                                <p class="font-semibold text-yellow-400">Kazanƒ±lan AP: <span id="ap-gained">${state.apGained}</span></p>
                                <p class="font-semibold text-gray-400">S√ºre: <span id="game-time">${Math.floor(state.gameTime / 50)}s</span></p>
                                <p class="font-semibold text-green-400">Mevcut D√º≈üman: <span id="enemy-count">${state.enemies.length}</span></p>
                            </div>
                        </div>

                        <!-- 2D Oyun Alanƒ± -->
                        <div id="arena-canvas"
                            style="width: ${ARENA_SIZE}px; height: ${ARENA_SIZE}px;"
                            class="relative bg-gray-700 border-4 border-gray-600 rounded-lg shadow-inner overflow-hidden arena"
                        >
                            <!-- Oyuncu ve D√º≈ümanlar dinamik olarak eklenecek -->
                        </div>

                        <!-- GUI Kontrol Paneli (PC/Mobil) -->
                        <div class="mt-4 w-full max-w-xl bg-gray-800 p-4 rounded-xl shadow-2xl">
                            <h4 class="text-lg font-bold text-center mb-3 text-yellow-300">Kontrol ve Strateji</h4>

                            <div id="control-area" class="flex justify-around items-start mb-4 flex-wrap">
                                <!-- Kontrol mekanizmasƒ± buraya gelecek (Joystick veya klavye a√ßƒ±klamasƒ±) -->
                            </div>

                            <div class="flex justify-center space-x-4 border-t border-gray-700 pt-4">
                                <!-- Yetenek Butonu -->
                                ${ButtonHTML(`${selectedClass.icon} Yetenek (E)`, `useAbility()`, 'bg-indigo-600', false, 'flex-1')}

                                <!-- ƒ∞ksir Yuvalarƒ± -->
                                ${POTIONS.map(p => `
                                    <button 
                                        id="potion-btn-${p.id}"
                                        onclick="usePotion('${p.id}')" 
                                        class="px-6 py-3 rounded-xl font-bold shadow-lg transition duration-200 bg-green-500 hover:bg-opacity-80 active:translate-y-0.5"
                                    >
                                        ${p.icon} ${p.name} (${Math.ceil(state.potionCooldowns[p.id] / 50)}s)
                                    </button>
                                `).join('')}
                            </div>
                            <div class="text-center mt-4">
                                ${ButtonHTML('√áƒ±kƒ±≈ü', `setScreen('${SCREEN.START}')`, 'bg-red-600', false)}
                            </div>
                        </div>
                    </div>
                `;
                container.innerHTML = arenaHtml;
                initializeArenaGame(); // Oyun d√∂ng√ºs√ºn√º ba≈ülat
            }

            // --- YALNIZCA G√úNCELLEME ƒ∞≈ûLEMLERƒ∞ (Y√ºksek Performans i√ßin) ---
            
            const arenaCanvas = document.getElementById('arena-canvas');
            if (!arenaCanvas) return; // Eƒüer Arena ekranƒ± deƒüilse dur

            // 1. √úst UI G√ºncellemesi
            document.getElementById('hp-value').textContent = state.hp;
            document.getElementById('ap-gained').textContent = state.apGained;
            document.getElementById('game-time').textContent = `${Math.floor(state.gameTime / 50)}s`;
            document.getElementById('enemy-count').textContent = state.enemies.length;
            
            // 2. Kontrol Alanƒ± G√ºncellemesi (Mobil/PC)
            const controlArea = document.getElementById('control-area');
            if (state.isMobileView && !controlArea.querySelector('#joystick')) {
                controlArea.innerHTML = renderJoystickHTML();
                setupJoystickListeners();
            } else if (!state.isMobileView && controlArea.querySelector('#joystick')) {
                controlArea.innerHTML = `
                    <div class="text-sm text-gray-400 text-center p-2 rounded-lg border border-gray-700 mb-4 md:mb-0">
                        <p class="font-bold mb-1 text-indigo-400">Bƒ∞LGƒ∞SAYAR Klavye Kontrol√º:</p>
                        <p class="text-white">Hareket: <span class="text-indigo-400 font-mono">W A S D</span></p>
                        <p class="text-white">Yetenek: <span class="text-green-400 font-mono">E</span> | ƒ∞ksirler: <span class="text-yellow-400 font-mono">Q R</span></p>
                    </div>
                `;
            } else if (state.isMobileView) {
                 // Sadece mobil g√∂r√ºn√ºmde hareket durumu g√ºncellemesi i√ßin Joystick'in g√ºncellenmesi gerekir
                 // Ancak DOM manip√ºlasyonu yerine sadece event listener'lar ile √ßalƒ±≈üƒ±yoruz.
            }
            
            // 3. ƒ∞ksir Butonlarƒ± G√ºncellemesi
            POTIONS.forEach(p => {
                const btn = document.getElementById(`potion-btn-${p.id}`);
                const cooldown = state.potionCooldowns[p.id];
                const isDisabled = cooldown > 0;
                
                btn.disabled = isDisabled;
                btn.textContent = `${p.icon} ${p.name} (${Math.ceil(cooldown / 50)}s)`;
                btn.className = `px-6 py-3 rounded-xl font-bold shadow-lg transition duration-200 ${isDisabled ? 'bg-red-700 opacity-50 cursor-not-allowed' : 'bg-green-500 hover:bg-opacity-80 active:translate-y-0.5'} flex-1`;
            });


            // 4. Arena G√∂rsel G√ºncellemesi (Oyuncu, D√º≈ümanlar, Mesaj)
            let arenaContent = '';

            // Oyuncu
            arenaContent += `
                <div id="player-char"
                    style="transform: translate(${state.playerPos.x}px, ${state.playerPos.y}px);"
                    class="absolute w-5 h-5 rounded-full flex items-center justify-center text-sm font-bold shadow-lg transition-colors duration-100 z-10 ${state.isSpeedBoost ? 'bg-indigo-400 animate-pulse' : `bg-blue-500`}"
                >
                    ${selectedClass.icon}
                </div>
            `;
            
            // D√º≈ümanlar
            state.enemies.forEach(enemy => {
                const statusClass = enemy.status === 'VURULDU' ? 'bg-yellow-500 border-yellow-300' : 
                                    enemy.status === 'SAVU≈û' ? 'bg-green-500 border-green-300' : '';
                const hpPercent = (enemy.hp / enemy.maxHp) * 100;
                
                arenaContent += `
                    <div
                        style="transform: translate(${enemy.x}px, ${enemy.y}px);"
                        class="absolute w-5 h-5 rounded-md bg-red-600 flex items-center justify-center text-xs text-white font-bold transition-all duration-100 ease-linear shadow-md border-2 ${statusClass}"
                    >
                        AI
                        <div class="absolute top-[-8px] w-full h-1 bg-red-900">
                            <div style="width: ${hpPercent}%" class="h-full bg-red-400"></div>
                        </div>
                    </div>
                `;
            });

            // Mesaj Kutusu
            if (state.message) {
                arenaContent += `
                    <div id="message-box" class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-black bg-opacity-70 text-white p-2 rounded-lg font-bold text-lg z-20">
                        ${state.message}
                    </div>
                `;
            }

            // DOM'u tek seferde g√ºncelle
            arenaCanvas.innerHTML = arenaContent;
        }

        // Joystick HTML'i
        function renderJoystickHTML() {
            return `
                <div id="joystick" class="flex flex-col items-center justify-center space-y-1">
                    <p class="text-sm text-gray-400 mb-1">MOBƒ∞L Joystick (Dokun ve Tut)</p>
                    <div class="flex space-x-1">
                        <button id="j-ul" class="p-2 w-10 h-10 flex items-center justify-center bg-gray-600 rounded-lg text-xs hover:bg-gray-500 active:bg-gray-400 transition">‚Üñ</button>
                        <button id="j-u" class="p-2 w-10 h-10 flex items-center justify-center bg-gray-600 rounded-lg text-xs hover:bg-gray-500 active:bg-gray-400 transition">‚¨Ü</button>
                        <button id="j-ur" class="p-2 w-10 h-10 flex items-center justify-center bg-gray-600 rounded-lg text-xs hover:bg-gray-500 active:bg-gray-400 transition">‚Üó</button>
                    </div>
                    <div class="flex space-x-1">
                        <button id="j-l" class="p-2 w-10 h-10 flex items-center justify-center bg-gray-600 rounded-lg text-xs hover:bg-gray-500 active:bg-gray-400 transition">‚¨Ö</button>
                        <button id="j-stop" class="p-2 bg-red-700 rounded-lg text-sm font-bold shadow-inner w-10 h-10">DUR</button>
                        <button id="j-r" class="p-2 w-10 h-10 flex items-center justify-center bg-gray-600 rounded-lg text-xs hover:bg-gray-500 active:bg-gray-400 transition">‚û°</button>
                    </div>
                    <div class="flex space-x-1">
                        <button id="j-dl" class="p-2 w-10 h-10 flex items-center justify-center bg-gray-600 rounded-lg text-xs hover:bg-gray-500 active:bg-gray-400 transition">‚Üô</button>
                        <button id="j-d" class="p-2 w-10 h-10 flex items-center justify-center bg-gray-600 rounded-lg text-xs hover:bg-gray-500 active:bg-gray-400 transition">‚¨á</button>
                        <button id="j-dr" class="p-2 w-10 h-10 flex items-center justify-center bg-gray-600 rounded-lg text-xs hover:bg-gray-500 active:bg-gray-400 transition">‚Üò</button>
                    </div>
                    <p class="text-xs text-gray-500 mt-1">* Parmaƒüƒ±nƒ±zƒ± kaldƒ±rdƒ±ƒüƒ±nƒ±zda durur.</p>
                </div>
            `;
        }

        // Joystick Event Listener Kurulumu
        function setupJoystickListeners() {
            const joystickMoves = [
                { id: 'j-ul', x: -1, y: -1 }, { id: 'j-u', x: 0, y: -1 }, { id: 'j-ur', x: 1, y: -1 },
                { id: 'j-l', x: -1, y: 0 }, { id: 'j-r', x: 1, y: 0 },
                { id: 'j-dl', x: -1, y: 1 }, { id: 'j-d', x: 0, y: 1 }, { id: 'j-dr', x: 1, y: 1 }
            ];

            const handleTouchStart = (dirX, dirY) => {
                updateState({ movement: { x: dirX, y: dirY } }, false);
            };

            const handleTouchEnd = () => {
                updateState({ movement: { x: 0, y: 0 } }, false);
            };
            
            const stopButton = document.getElementById('j-stop');
            if (stopButton) {
                 stopButton.addEventListener('touchstart', (e) => { e.preventDefault(); e.stopPropagation(); handleTouchEnd(); });
                 stopButton.addEventListener('mousedown', handleTouchEnd);
            }


            joystickMoves.forEach(({ id, x, y }) => {
                const btn = document.getElementById(id);
                if (btn) {
                    // Mobil dokunmatik olaylarƒ±
                    btn.addEventListener('touchstart', (e) => { e.preventDefault(); e.stopPropagation(); handleTouchStart(x, y); });
                    btn.addEventListener('touchend', handleTouchEnd);
                    
                    // PC/Mouse testi i√ßin
                    btn.addEventListener('mousedown', () => handleTouchStart(x, y));
                    btn.addEventListener('mouseup', handleTouchEnd);
                    btn.addEventListener('mouseleave', handleTouchEnd);
                }
            });
        }
        
        // --- ANA RENDER FONKSƒ∞YONU ---
        function renderApp() {
            if (!state.isAuthReady) {
                // Y√ºkleme ekranƒ± kalacak
                return; 
            }

            // Ekran durumuna g√∂re ilgili render fonksiyonunu √ßaƒüƒ±r
            switch (state.screen) {
                case SCREEN.START:
                    renderStartScreen();
                    break;
                case SCREEN.CHARACTER_INVENTORY:
                    renderCharacterInventoryScreen();
                    break;
                case SCREEN.ARENA:
                    renderArenaGameUI();
                    break;
                case SCREEN.LEADERBOARD:
                    renderLeaderboardScreen();
                    break;
                case SCREEN.STORE:
                    renderStoreScreen();
                    break;
                case SCREEN.GAME_OVER:
                    renderGameOverScreen();
                    break;
                case SCREEN.MULTIPLAYER_LOBBY:
                    // Basit Lobi Placeholder'ƒ± (√áok karma≈üƒ±k olduƒüu i√ßin HTML'e aktarmadan atlanmƒ±≈ütƒ±r)
                    document.getElementById('app').innerHTML = `
                        <div class="flex flex-col items-center min-h-screen bg-gray-900 text-white p-4">
                            <div class="bg-gray-800 p-6 rounded-2xl shadow-2xl w-full max-w-4xl mt-8">
                                <h2 class="text-3xl font-bold text-center text-orange-400 mb-6">Multiplayer Lobi (PvP)</h2>
                                <p class="text-center text-lg mb-6 text-yellow-400">Baƒülandƒ±: ${state.username}</p>
                                <p class="text-center text-red-400 mb-6">PvP sim√ºlasyonu karma≈üƒ±klƒ±k nedeniyle HTML s√ºr√ºm√ºnden √ßƒ±karƒ±lmƒ±≈ütƒ±r. Ana men√ºye d√∂n√ºn.</p>
                                ${ButtonHTML('Ana Men√ºye D√∂n', "setScreen('START')", 'bg-gray-600')}
                            </div>
                        </div>
                    `;
                    break;
                default:
                    renderStartScreen();
            }
        }

    </script>
</body>
</html>
